// Allow content script to open the side panel
chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
    if (message.type === 'open_side_panel') {
        chrome.sidePanel.open({ tabId: sender.tab.id });
    }

    if (message.type === 'GET_RECOMMENDATIONS') {
        // Immediately tell the side panel to show a loading state
        chrome.runtime.sendMessage({ type: 'SHOW_LOADING' });

        // Get API key and context from storage
        chrome.storage.sync.get(['apiKey', 'contextContent'], async (result) => {
            const { apiKey, contextContent } = result;

            if (!apiKey) {
                chrome.runtime.sendMessage({ type: 'SHOW_ERROR', error: 'API Key not set. Please set it in the options.' });
                return;
            }

            const userText = message.text;
            let prompt = `
                You are an expert writing assistant. A user is writing and needs help with the next sentence.
                Your task is to provide three distinct, creative, and contextually relevant suggestions for the next sentence.
                The user's text so far is: "${userText}"
            `;

            if (contextContent) {
                prompt += `\n\nThe user has also provided the following context. Use it to inform your suggestions:\n---CONTEXT---\n${contextContent}\n---END CONTEXT---`;
            }

            prompt += `\nBased on the text and any provided context, generate three suggestions for the very next sentence.
                       IMPORTANT: Your entire response must be ONLY a single, valid JSON array of strings, with no other text, explanations, or markdown.
                       Example: ["First suggestion.", "Second suggestion.", "A third, different idea."]
            `;

            const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;
            const payload = { contents: [{ role: "user", parts: [{ text: prompt }] }] };

            try {
                const response = await fetch(apiUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });

                if (!response.ok) {
                    if (response.status === 400 || response.status === 403) {
                         throw new Error('Invalid API Key. Please check your key in the options.');
                    }
                    throw new Error(`API returned an error: ${response.status} ${response.statusText}`);
                }

                const result = await response.json();

                if (result.candidates && result.candidates.length > 0) {
                    const rawText = result.candidates[0].content.parts[0].text;
                    try {
                        const cleanedText = rawText.trim().replace(/^```json\n/, '').replace(/\n```$/, '');
                        const suggestions = JSON.parse(cleanedText);
                        // Send recommendations to the side panel
                        chrome.runtime.sendMessage({ type: 'SHOW_RECOMMENDATIONS', data: suggestions });
                    } catch (parseError) {
                        throw new Error("AI returned a response in an unexpected format.");
                    }
                } else {
                     throw new Error("No suggestions were generated by the AI.");
                }
            } catch (error) {
                chrome.runtime.sendMessage({ type: 'SHOW_ERROR', error: error.message });
            }
        });
        return true; // for async response
    }
});

// Open side panel on action click
chrome.action.onClicked.addListener((tab) => {
    chrome.sidePanel.open({ tabId: tab.id });
});

