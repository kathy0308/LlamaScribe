// --- background.js (Corrected and Improved) ---
// This script runs in the background to handle API calls more robustly.

chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
    if (message.type === 'GET_RECOMMENDATIONS') {
        // Get API key and context from storage
        chrome.storage.sync.get(['apiKey', 'contextContent'], async (result) => {
            const { apiKey, contextContent } = result;

            // 1. Check for API Key
            if (!apiKey) {
                chrome.tabs.sendMessage(sender.tab.id, {
                    type: 'SHOW_ERROR',
                    error: 'API Key not set. Please set it in the extension options.'
                });
                return;
            }

            // 2. Construct a more detailed prompt
            const userText = message.text;
            let prompt = `
                You are an expert writing assistant. A user is writing and needs help with the next sentence.
                Your task is to provide three distinct, creative, and contextually relevant suggestions for the next sentence.
                The user's text so far is: "${userText}"
            `;

            if (contextContent) {
                prompt += `\n\nThe user has also provided the following context. Use it to inform your suggestions:\n---CONTEXT---\n${contextContent}\n---END CONTEXT---`;
            }

            prompt += `\nBased on the text and any provided context, generate three suggestions for the very next sentence.
                       IMPORTANT: Your entire response must be ONLY a single, valid JSON array of strings, with no other text, explanations, or markdown.
                       Example: ["First suggestion.", "Second suggestion.", "A third, different idea."]
            `;

            const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;
            const payload = { contents: [{ role: "user", parts: [{ text: prompt }] }] };

            try {
                // 3. Make the API call
                const response = await fetch(apiUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });

                // 4. Improved Error Handling for the response
                if (!response.ok) {
                    if (response.status === 400 || response.status === 403) {
                         throw new Error('Invalid API Key. Please check your key in the extension options.');
                    }
                    throw new Error(`API returned an error: ${response.status} ${response.statusText}`);
                }

                const result = await response.json();

                // 5. Robust Parsing of the AI's response
                if (result.candidates && result.candidates.length > 0) {
                    const rawText = result.candidates[0].content.parts[0].text;
                    try {
                        // Clean the text before parsing
                        const cleanedText = rawText.trim().replace(/^```json\n/, '').replace(/\n```$/, '');
                        const suggestions = JSON.parse(cleanedText);
                        chrome.tabs.sendMessage(sender.tab.id, { type: 'SHOW_RECOMMENDATIONS', data: suggestions });
                    } catch (parseError) {
                        console.error("Failed to parse AI response:", rawText);
                        throw new Error("The AI returned a response in an unexpected format.");
                    }
                } else {
                     throw new Error("No suggestions were generated by the AI.");
                }
            } catch (error) {
                console.error('AI Assistant Error:', error);
                chrome.tabs.sendMessage(sender.tab.id, { type: 'SHOW_ERROR', error: error.message });
            }
        });
        return true; // Indicates that the response is sent asynchronously
    }
});
